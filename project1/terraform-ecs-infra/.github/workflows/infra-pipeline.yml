name: Terraform Deployment Pipeline

on:
  workflow_dispatch:
  push:
    branches:
      - dev
      - stage
      - prod
 
jobs:
  determine_environment:
      name: Determine Environment
      runs-on: ubuntu-latest
      outputs:
       env: ${{ steps.determine_env.outputs.ENVIRONMENT }}
      steps:
        - name: Checkout code
          uses: actions/checkout@v2
        
        - name: Determine Environment
          id: determine_env
          run: |
            # Get the current environment name from the branch name
            ENV=$(echo "${{ github.ref }}" | awk -F/ '{print $3}')
            echo "${{ github.ref }}"
            echo "ENVIRONMENT=$ENV"  >> $GITHUB_OUTPUT
  deploy:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: ["determine_environment"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.5.2   # Specify the Terraform version
      - name: Set AWS Credentials as per Env
        run: |
          if [ "${{ needs.determine_environment.outputs.env }}" = "dev" ]; then
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_DEV_ACCESS_KEY }}" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_DEV_SECRET_KEY }}" >> $GITHUB_ENV
            echo "AWS_REGION=us-east-2" >> $GITHUB_ENV
          elif [ "${{ needs.determine_environment.outputs.env }}" = "stage" ]; then
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_STAGE_ACCESS_KEY }}" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_STAGE_SECRET_KEY }}" >> $GITHUB_ENV
            echo "AWS_REGION=us-east-2" >> $GITHUB_ENV
          elif [ "${{ needs.determine_environment.outputs.env }}" = "prod" ]; then
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_PROD_ACCESS_KEY }}" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_PROD_SECRET_KEY }}" >> $GITHUB_ENV
            echo "AWS_REGION=us-east-1" >> $GITHUB_ENV
          else
            echo "Invalid environment."
            exit 1
          fi
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}  # Specify your AWS region
      - name: Terraform Init
        id: init
        run: |
          pwd
          ls
          cd ecs_terraform
          terraform init -backend-config="backends.conf"
      - name: Terraform Plan
        id: plan
        if: github.event_name == 'push'
        env:
           ENVIRONMENT: ${{ needs.determine_environment.outputs.env }}
        run: |
          pwd
          ls
          cd ecs_terraform
          terraform plan -var-file="${ENVIRONMENT}-terraform.tfvars"
        continue-on-error: true

      - name: Terraform plan status
        if: steps.plan.outcome == 'failure'
        run: exit 1
      
      - name: Terraform Apply
        if: github.event_name == 'push'
        env:
           ENVIRONMENT: ${{ needs.determine_environment.outputs.env }}
        run: |
          pwd
          ls
          cd ecs_terraform
          # terraform apply -var-file="${ENVIRONMENT}-terraform.tfvars" -auto-approve
          terraform destroy -var-file="${ENVIRONMENT}-terraform.tfvars" -auto-approve


